#!/bin/sh

############################################
# Exit on error
############################################
set -e

############################################
# Check if git is installed
############################################
if ! [ -x "$(command -v git)" ]; then
  echo 'Error: git is not installed.' >&2
  exit 1
fi


############################################
# Initialize SoftEtherVPN
############################################
if [ -d "$SE_VPN_ROOT" ]; then
    echo 'Configuring SoftEtherVPN...'

    cd "$SE_VPN_ROOT"
    git submodule init && git submodule update

    # shellcheck disable=SC2155
#    export OPENSSL_ROOT_DIR="$(brew --prefix openssl)"
#    export OPENSSL_INCLUDE_DIR="$OPENSSL_ROOT_DIR/include"
    ./configure
    cd "$PROJECT_ROOT"
fi

############################################
# Set environment variables
############################################
# shellcheck disable=SC2155
export PROJECT_ROOT="$(pwd)"
export SE_VPN_ROOT="$PROJECT_ROOT/SoftEtherVPN"
export IOS_CMAKE_ROOT="$PROJECT_ROOT/ios-cmake"
export NCURSES_ROOT="$PROJECT_ROOT/ncurses"

# Build the project
mkdir -p build

############################################
# Build ncurses
############################################
if [ -d "$NCURSES_ROOT" ]; then
    cd "$NCURSES_ROOT"
    echo '===================================='
    echo 'Configuring Ncurses...'
    echo '===================================='
    make clean
    ./configure --host=arm-apple-darwin --without-shared --without-progs --without-tests || { echo 'Ncurses configuration failed'; exit 1; }
    make || { echo 'Failed to build Ncurses'; exit 1; }
    echo 'Finished building Ncurses'
    echo '===================================='
    cd "$PROJECT_ROOT"
fi

############################################
# Build OpenSSL
############################################
# Remove existing OpenSSL directory if it exists
#if [ -d "$OPENSSL_ROOT_DIR" ]; then
#    rm -rf "$OPENSSL_ROOT_DIR"
#fi
## Clone OpenSSL 1.1.1-stable branch
#git clone --branch OpenSSL_1_1_1-stable --single-branch https://github.com/openssl/openssl.git "$OPENSSL_ROOT_DIR"
if [ -d "$OPENSSL_ROOT_DIR" ]; then
    cd "$OPENSSL_ROOT_DIR"
    echo '===================================='
    echo 'Configuring OpenSSL...'
    echo '===================================='

    # Set environment variables for iOS cross-compilation
    export IPHONEOS_DEPLOYMENT_TARGET="13.0"
    export CROSS_TOP="$(xcrun --sdk iphoneos --show-sdk-platform-path)/Developer"
    export CROSS_SDK="$(xcrun --sdk iphoneos --show-sdk-path | xargs basename)"
    export CFLAGS="-DTARGET_OS_IPHONE"
    export PATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin:$PATH"
    export OPENSSL_ROOT_DIR="$PROJECT_ROOT/openssl"
    # Configure OpenSSL
    ./Configure ios64-cross no-shared no-async || { echo 'OpenSSL configuration failed'; exit 1; }
    # Build OpenSSL
    make build_libs || { echo 'Failed to build OpenSSL'; exit 1; }
    echo 'Finished building OpenSSL'
    echo '===================================='
    lipo -info "$OPENSSL_ROOT_DIR/libssl.a"
    lipo -info "$OPENSSL_ROOT_DIR/libcrypto.a"
    echo '===================================='
    cd "$PROJECT_ROOT"
fi
#
#############################################
## Build hamcorebuilder for the host (macOS)
#############################################
#if [ -d "$SE_VPN_ROOT" ]; then
#    echo 'Building hamcorebuilder for the host...'
#    cd "$SE_VPN_ROOT" || exit 1
#
#    # Create a build directory for the host build
#    export HOST_BUILD_DIR="$PROJECT_ROOT/build_host"
#    rm -rf "$HOST_BUILD_DIR"
#    mkdir -p "$HOST_BUILD_DIR"
#    cd "$HOST_BUILD_DIR" || exit
#
#
##    export OPENSSL_ROOT_DIR="$(brew --prefix openssl@1.1)"
##    export OPENSSL_INCLUDE_DIR="$OPENSSL_ROOT_DIR/include"
##    export OPENSSL_LIBRARIES="$OPENSSL_ROOT_DIR/lib"
#
#    cmake "$SE_VPN_ROOT" -G "Unix Makefiles" \
#        -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" \
#        -DOPENSSL_INCLUDE_DIR="$OPENSSL_ROOT_DIR/include" \
#        -DOPENSSL_SSL_LIBRARY="$OPENSSL_ROOT_DIR/libssl.a" \
#        -DOPENSSL_CRYPTO_LIBRARY="$OPENSSL_ROOT_DIR/libcrypto.a" \
#        -DCMAKE_BUILD_TYPE=Release || {
#            echo 'CMake configuration failed for hamcorebuilder host build'
#            exit 1
#        }
#
#    # Build only the hamcorebuilder target
#    cmake --build . --target hamcorebuilder || {
#        echo 'Failed to build hamcorebuilder for host'
#        exit 1
#    }
#
#    echo 'Finished building hamcorebuilder for host'
#    cd "$PROJECT_ROOT"
#fi

# Build SoftEtherVPN
if [ -d "$SE_VPN_ROOT" ]; then
    echo 'Configuring SoftEtherVPN...'
    echo 1
    cd "$SE_VPN_ROOT"
    git submodule init && git submodule update
    echo 2
    # shellcheck disable=SC2155
#    export OPENSSL_ROOT_DIR="$(brew --prefix openssl)"
#    export OPENSSL_INCLUDE_DIR="$OPENSSL_ROOT_DIR/include"
#    ./configure || {
#        echo 'Failed to init SoftEtherVPN'
#        exit 1
#    }

    cd "$PROJECT_ROOT"
    export BUILD_DIR="$PROJECT_ROOT/build"
    export IOS_BUILD_DIR="$BUILD_DIR/ios"
    # Remove any existing build directory
    rm -rf "$IOS_BUILD_DIR"
    mkdir -p "$IOS_BUILD_DIR"
    cd "$IOS_BUILD_DIR" || exit
    echo 3
    # Set the iOS toolchain file
    export CFLAGS="-DTARGET_OS_IPHONE -D__APPLE__ -D__MACH__ -D__IOS__ -arch arm64 -Wno-error=implicit-function-declaration -Wno-error=pointer-sign"
    export OPENSSL_ROOT_DIR="$PROJECT_ROOT/openssl"
    # Set the iOS toolchain file
    cmake "$SE_VPN_ROOT" -G "Xcode" \
        -DCMAKE_SYSTEM_NAME="iOS" \
        -DCMAKE_OSX_DEPLOYMENT_TARGET="$IPHONEOS_DEPLOYMENT_TARGET" \
        -DCMAKE_TOOLCHAIN_FILE="$IOS_TOOLCHAIN_FILE" \
        -DCMAKE_BUILD_TYPE=RelWithDebInfo \
        -DCMAKE_INSTALL_PREFIX="$IOS_BUILD_DIR" \
        -DOPENSSL_USE_STATIC_LIBS=TRUE \
        -DOPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" \
        -DOPENSSL_INCLUDE_DIR="$OPENSSL_ROOT_DIR/include" \
        -DOPENSSL_SSL_LIBRARY="$OPENSSL_ROOT_DIR/libssl.a" \
        -DOPENSSL_CRYPTO_LIBRARY="$OPENSSL_ROOT_DIR/libcrypto.a" \
        -DCURSES_INCLUDE_PATH="$NCURSES_ROOT/include" \
        -DCURSES_LIBRARY="$NCURSES_ROOT/lib/libncurses.a" \
        -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY="-" \
        -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED="NO" \
        -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED="NO" \
        -DCMAKE_OSX_SYSROOT="iphoneos" || {
            echo 'CMake configuration failed for SoftEtherVPN'
            exit 1
        }

    # Build and install
    cmake --build . --config Release --target install || {
        echo 'Failed to build SoftEtherVPN'
        exit 1
    }

    echo 'Finished building SoftEtherVPN'
    cd "$PROJECT_ROOT"
fi

echo '===================================='
echo 'Build Process Completed Successfully'
echo '===================================='

# # Build SoftEtherVPN
# if [ -d "$SE_VPN_ROOT" ]; then
#     cd "$SE_VPN_ROOT"
#     echo '===================================='
#     echo 'Configuring SoftEtherVPN...'
#     echo '===================================='
#     export CC="clang -isysroot $(xcrun --sdk iphoneos --show-sdk-path)"
#     export CROSS_TOP="$(xcrun --sdk iphoneos --show-sdk-platform-path)/Developer"
#     export CROSS_SDK="$(xcrun --sdk iphoneos --show-sdk-path | xargs basename)"
#     export CFLAGS="-DTARGET_OS_IPHONE"
#     export IPHONEOS_DEPLOYMENT_TARGET="13.0"
#     export PATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin:$PATH"
#     export OPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR"
#     ./configure
#     # cmake -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR -DOPENSSL_LIBRARIES=$OPENSSL_LIBRARIES .
#     make -C build
#     # make -C build install # Not needed
#     echo 'Finished building SoftEtherVPN'
#     echo '===================================='
#     cd "$PROJECT_ROOT"
# fi
